@page "/refbook/product/{type}/{ProductId:long?}"
@using General.Abstractions.Storage;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Models.Product;

@inject IProductRepository repository;
@inject IProductGroupRepository productGroupRepository;
@inject NavigationManager Navigation
@inject IProductStatePicker statePicker;

@using DEntity = PorphumReferenceBook.Logic.Models.Product.Product;
@using PorphumSales.Logic.Abstractions.Models
@using PorphumSales.Logic.Models.Sales
@using PorphumWeb.Blazor.Classes
@using PorphumWeb.Blazor.Pages.Components

<PageTitle>@Title</PageTitle>
<ConfirmDialog @ref="dialog" />
    <Offcanvas @ref="offcanvas" Placement="Placement.Start" />
    <br />
<div class=row>
    <div class="col-4 col-md-4">
        <h2>@Title</h2>
    </div>
    @if (_viewModel.isEdit)
    {
        <div class="col-3 col-md-3">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Danger" @onclick="@(() => DeleteAsync(_editContext))"> Удалить </Button>
        </div>
    }
</div>
<div class="row">
    <EditForm EditContext="_editContext">
        <br />
        <div class="row">
            <div class="col-7 col-md-7">
        <input type="hidden" @bind-value="_viewModel.isEdit" />
        @if (_viewModel.isEdit)
        {
            <div class="row">
                <div class="@ViewModel.TITTLE_CLASS">
                    <b>Id</b>
                </div>
                <div class="@ViewModel.VALUE_CLASS">
                    <InputNumber id="id" @bind-Value="_viewModel.Key" readonly="readonly" />
                </div>

            </div>
        }
        <br />
        <div class="row">
            <div class="@ViewModel.TITTLE_CLASS">
                <b>Название</b>
            </div>
            <div class="@ViewModel.VALUE_CLASS">
                <InputText id="name" @bind-Value="_viewModel.Name" />
            </div>
        </div>
        <br />
                <div class="row">
                    <div class="@ViewModel.TITTLE_CLASS">
                        <b>Группа</b>
                    </div>
                    <div class="@ViewModel.VALUE_CLASS">
                        @_viewModel.GroupId
                    </div>
                    <div class="@ViewModel.VALUE_CLASS">
                        <b><Button Type="ButtonType.Link" Color="ButtonColor.Primary" @onclick="ShowOfCanvas"> Выбрать </Button></b>
                    </div>
                </div>
            </div>
            @if (_viewModel.isEdit)
            {
                <div class="col-3 col-md-3">
                    <PorphumWeb.Blazor.Pages.Components.ProductState Product="State" />
                </div>
            }
        </div>
        <hr />
        <br />
        <div class=row>
            <div class="col-2 col-md-2" style="margin-left:2rem">
                <h2>Дополнительная информация</h2>
            </div>
            <div class="col-5 col-md-5">
                <Button Type="ButtonType.Button" Color="ButtonColor.Dark" @onclick="@(() => toggleItem.ToggleAsync())">@toggleItem.ButtonTittle </Button>
                </div>
        </div>
        <Collapse @ref="toggleItem.CollapseItem"
                  OnHiding="toggleItem.OnHiddenCallback"
                  OnShown="toggleItem.OnShownCallback">
            <div class="row">
                <div class="@ViewModel.TITTLE_CLASS">
                    <b>Штрих код</b>
                </div>
                <div class="@ViewModel.VALUE_CLASS">
                    <InputText id="barcode" @bind-Value="_viewModel.Barcode" />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="@ViewModel.TITTLE_CLASS">
                    <b>Описание</b>
                </div>
                <div class="@ViewModel.VALUE_CLASS">
                    <InputTextArea id="description" @bind-Value="_viewModel.Description" />
                </div>
            </div>
            
        </Collapse>
        <hr />
        <br />
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Сохранить </Button>
    </EditForm>
</div>

    @code {
    private Offcanvas offcanvas = default!;
    private ConfirmDialog dialog = default!;
    private ToggleClass toggleItem = new(showTittle: "Показать");
    private EditContext? _editContext;
    private ViewModel _viewModel = new();
    private IEnumerable<ProductGroup> _groups = Enumerable.Empty<ProductGroup>();

    public string Title { get; set; } = "Default tittle";
    [Parameter]
    [EditorRequired]
    public string Type { get; set; } = null!;

    [Parameter]
    public long? ProductId { get; set; } = null!;

    public StateFullProduct State { get; set; } = default!;


    protected override void OnInitialized()
    {
        _groups = productGroupRepository.GetEntities();

        if (Type == "create")
        {
            Title = "Добавить новое наименование";
        }
        else if (Type == "edit")
        {
            Title = "Наименование";

            var product = repository.GetByKey(ProductId ?? throw new InvalidOperationException()) ?? throw new InvalidOperationException();

            State = statePicker.PickState(product);

            _viewModel = new()
            {
                isEdit = true,
                Key = product.Key,
                Name = product.Name,
                GroupId = product.Group.Key,
                Description = product.Info.Description
            };

            if (product.Info.BarCode is not null)
            {
                _viewModel.Barcode = product.Info.BarCode.Value;
            }
        }
        else
        {
            throw new InvalidOperationException();
        }

        _editContext = new(_viewModel);
    }

    private async void DeleteAsync(EditContext formContext)
    {
        if (_viewModel.isEdit)
        {
            var product = repository.GetByKey(_viewModel.Key) ?? throw new InvalidOperationException();

            var confirmation = await dialog.ShowAsync(
                title: "Вы уверены, что вы хотите удалть?",
                message1: "После удаления нельзя будет вернуться.",
                message2: "Выполнить?");

            if (!confirmation)
            {
                return;
            }

            repository.Delete(product);

            Navigation.NavigateTo("refbook/products");
            return;
        }

        throw new InvalidOperationException();
    }

    private async Task ShowOfCanvas()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("SelectGroup", EventCallback.Factory.Create<ProductGroup>(this, GroupSelect));
        await offcanvas.ShowAsync<MultiGroupPick>(title: "Выберите группу", parameters: parameters);
    }

    private async Task GroupSelect(ProductGroup group)
    {
        await offcanvas.HideAsync();
        _viewModel.GroupId = group.Key;

    }


    private void Submit(EditContext formContext)
    {
        var group = productGroupRepository.GetByKey(_viewModel.GroupId) ?? throw new InvalidOperationException();


        if (_viewModel.isEdit)
        {
            var product = repository.GetByKey(_viewModel.Key) ?? throw new InvalidOperationException();

            var newProduct = new DEntity(
                product.Key,
                _viewModel.Name ?? throw new InvalidOperationException(),
                group,
                new ProductInfo(
                    _viewModel.Barcode is not null
                        ? new BarCode(_viewModel.Barcode)
                        : null,
                    _viewModel.Description
                )
            );

            repository.Update(newProduct);
        }
        else
        {
            var newProduct = new DEntity(
                0,
                _viewModel.Name ?? throw new InvalidOperationException(),
                group,
                new ProductInfo(
                    _viewModel.Barcode is not null
                        ? new BarCode(_viewModel.Barcode)
                        : null,
                    _viewModel.Description
                )
            );

            repository.Add(newProduct);
        }

        Navigation.NavigateTo("refbook/products");
    }

    public class ViewModel
    {
        public static string TITTLE_CLASS = "col-1 col-md-1";
        public static string VALUE_CLASS = "col-5 col-md-5";

        public bool isEdit { get; set; } = false;

        public long Key { get; set; }

        public string? Name { get; set; }
        public string? Barcode { get; set; }
        public string? Description { get; set; }

        public int GroupId { get; set; }
    }
}
