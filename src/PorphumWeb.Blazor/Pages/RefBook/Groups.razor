@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using PorphumWeb.Blazor.Classes
@using PorphumWeb.Blazor.Pages.Components
@using TEntity = PorphumReferenceBook.Logic.Storage.Models.ProductGroup;
@using DEntity = PorphumReferenceBook.Logic.Models.Product.ProductGroup;

@inject IProductsGroupsQueryRepository queryRepository;
@inject IProductGroupRepository repository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation

@page "/refbook/groups"

<PageTitle>Группы</PageTitle>

<Offcanvas @ref="offcanvas" Placement="Placement.Start"/>

<br />
<div class="row">
    <Button Class="col-md-1"
            Style="margin-right:1rem;"
            Type="ButtonType.Link"
            Color="ButtonColor.Dark"
            @onclick="ShowOfCanvas">
        Выбрать
    </Button>
    <Button Class="col-md-1"
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            @onclick="@(()=>Navigation.NavigateTo("refbook/group/create"))">
        Создать
    </Button>
</div>
<hr />
<br />
@if (Group is null)
{
    @("Группа не выбрана")
}
else
{
    <Group Type="edit" ProductId="@Group.Key" />
}


@code {

    public ProductGroup? Group { get; set; }
    private Offcanvas offcanvas = default!;
    private ToggleClass toggleItem = new();

    private GridClass gridItem = new();

    protected override void OnInitialized()
    {
        gridItem.EditContext = new(gridItem.Filter);
    }

    public async Task UpdateEntitiesAsync()
    {
        await gridItem.Grid.RefreshDataAsync();
    }

    public async Task<GridDataProviderResult<DEntity>> GridDataProvider(GridDataProviderRequest<DEntity> request)
    {
        var skip = (request.PageNumber - 1) * request.PageSize;
        var limit = request.PageSize;

        var config = new ProductsGroupsParamConfig()
            {
                NameLike = gridItem.Filter.SearchString,
                Skip = skip,
                Limit = limit
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsGroupsParamType, ProductsGroupsParamConfig, TEntity>).InitQuery(config);

        return await Task.FromResult(request.ApplyTo(queryRepository.GetByQuery(query)));
    }

    private async Task ShowOfCanvas()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("SelectGroup", EventCallback.Factory.Create<ProductGroup>(this, GroupSelect));
        await offcanvas.ShowAsync<MultiGroupPick>(title: "Выберите группу", parameters: parameters);
    }

    private async Task GroupSelect(ProductGroup group)
    {
        await offcanvas.HideAsync();
        Group = null;
        StateHasChanged();
        Group = group;
        
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;

        public Grid<DEntity> Grid { get; set; } = default!;
        public List<DEntity> Main { get; set; } = default!;

        public EditContext? EditContext { get; set; }

        public FilterClass Filter { get; set; } = new();

        public class FilterClass
        {
            public static string TITTLE_CLASS = "col-1 col-md-1";
            public static string VALUE_CLASS = "col-5 col-md-5";

            public string? SearchString { get; set; } = null!;

            public int? GroupId { get; set; } = null!;
        }
    }
}
