@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using TEntity = PorphumReferenceBook.Logic.Storage.Models.ProductGroup;
@using DEntity = PorphumReferenceBook.Logic.Models.Product.ProductGroup;

@inject IProductsGroupsQueryRepository productRepository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation
@inject LinkGenerator LinkGenerator

@page "/refbook/groups"

<PageTitle>Groups</PageTitle>

<div class="row">
    <EditForm EditContext="_editContext" OnSubmit="Submit">
        <p>
            SearchString:<br />
            <InputText id="search-string" @bind-Value="_filter.SearchString" />
        </p>
        <button type="submit">Submit</button>
    </EditForm>
</div>

<br />
<p>
    <h2>
        Groups:
    </h2>
    <button @onclick="@(()=>Navigation.NavigateTo("refbook/group/create"))">Add</button>
</p>
<br />
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Products</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Key</td>
                    <td>@product.Name</td>
                    <td><button @onclick="@(()=>Navigation.NavigateTo($"refbook/products/{product.Key}"))">Open</button></td>
                    <td><button @onclick="@(()=>Navigation.NavigateTo($"refbook/group/edit/{product.Key}"))">Show</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<p role="status">
    <button class="btn btn-primary" @onclick="DecrementCount">Prev</button>
    @(_skipCount + 1)
    <button class="btn btn-primary" @onclick="IncrementCount">Next</button>
</p>

@code {
    private Filter _filter = new();
    private EditContext? _editContext;

    private readonly int PAGE_SIZE = 5;

    private int _skipCount = 0;

    private DEntity[]? products;

    public string? NameLike { get; set; } = null;

    public int IncrementAmount { get; set; } = 1;

    private void UpdateProducts()
    {
        var query = (paramFactory as IQueryParamsFactory<ProductsGroupsParamType, ProductsGroupsParamConfig, TEntity>).InitQuery();

        var config = new ProductsGroupsParamConfig()
            {
                NameLike = NameLike,
                Skip = _skipCount * PAGE_SIZE,
                Limit = PAGE_SIZE
            };

        if (NameLike is not null)
        {
            query.Append((paramFactory as IQueryParamsFactory<ProductsGroupsParamType, ProductsGroupsParamConfig, TEntity>).CreateParam(ProductsGroupsParamType.NameLike, config));
        }

        query.Append((paramFactory as IQueryParamsFactory<ProductsGroupsParamType, ProductsGroupsParamConfig, TEntity>).CreateParam(ProductsGroupsParamType.Skip, config));
        query.Append((paramFactory as IQueryParamsFactory<ProductsGroupsParamType, ProductsGroupsParamConfig, TEntity>).CreateParam(ProductsGroupsParamType.Limit, config));

        products = productRepository.GetByQuery(query).ToArray();
    }

    protected override void OnParametersSet()
    {
        UpdateProducts();
    }

    private void IncrementCount()
    {
        _skipCount += IncrementAmount;

        UpdateProducts();
    }

    private void DecrementCount()
    {
        if (_skipCount == 0)
        {
            return;
        }
        _skipCount -= IncrementAmount;

        UpdateProducts();
    }

    protected override void OnInitialized()
    {
        UpdateProducts();
        _editContext = new(_filter);
    }

    public void Submit()
    {
        NameLike = _filter.SearchString;
        UpdateProducts();
    }

    public class Filter
    {
        public string? SearchString { get; set; } = null!;

        public int? GroupId { get; set; } = null!;
    }
}
