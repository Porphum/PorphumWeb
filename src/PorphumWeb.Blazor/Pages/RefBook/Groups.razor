@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using PorphumWeb.Blazor.Classes
@using TEntity = PorphumReferenceBook.Logic.Storage.Models.ProductGroup;
@using DEntity = PorphumReferenceBook.Logic.Models.Product.ProductGroup;

@inject IProductsGroupsQueryRepository productRepository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation

@page "/refbook/groups"

<PageTitle>Группы</PageTitle>
<br />
<div class="row">
    <Button 
        Class="col-md-1"
        Style="margin-right:1rem;"
        Type="ButtonType.Link"
        Color="ButtonColor.Dark"
            @onclick="@(()=>toggleItem.ToggleAsync())">
        @toggleItem.ButtonTittle
    </Button>
    <Button
        Class="col-md-1"
        Type="ButtonType.Link"
        Color="ButtonColor.Primary"
            @onclick="@(()=>Navigation.NavigateTo("refbook/group/create"))">
        Создать
    </Button>
</div>
<Collapse 
    @ref=toggleItem.CollapseItem
    OnHiding="toggleItem.OnHiddenCallback"
    OnShown="toggleItem.OnShownCallback">
    <br />
        <EditForm EditContext="gridItem.EditContext" OnSubmit="UpdateEntitiesAsync">
            <div class="row">
                <div class="@GridClass.FilterClass.TITTLE_CLASS">
                    Название:
                </div>
                <div class="@GridClass.FilterClass.VALUE_CLASS">
                    <InputText id="search-string" @bind-Value="gridItem.Filter.SearchString" />
                </div>
            </div>
        <br />
            <Button Type="ButtonType.Submit" Color="ButtonColor.Dark"> Поиск </Button>
        </EditForm>
    
</Collapse>
<hr/>
<br />
<Grid @ref="gridItem.Grid"
      TItem="DEntity"
      Class="table table-hover table-bordered table-striped"
      DataProvider="GridDataProvider"
      OnRowDoubleClick="RowClick"
      ItemsPerPageText="some text"
      PageSizeSelectorItems="new int[] {1}"
      PaginationItemsTextFormat=""
      AllowPaging="true"
      AllowRowClick="true"
      EmptyText="Нет данных"
      PageSize="GridClass.PAGE_SIZE"
      Responsive="true">

    <GridColumn TItem="DEntity" HeaderText="Id">
        @context.Key
    </GridColumn>
    <GridColumn TItem="DEntity" HeaderText="Название">
        @context.Name
    </GridColumn>
    <GridColumn TItem="DEntity" HeaderText="Наименования">
        <Button Size="Size.Small"
                Type="ButtonType.Link"
                Color="ButtonColor.Secondary"
                @onclick="@(()=>Navigation.NavigateTo($"refbook/products/{context.Key}"))">
            Посмотреть
        </Button>
    </GridColumn>
</Grid>

@code {


    private ToggleClass toggleItem = new();

    private GridClass gridItem = new();

    protected override void OnInitialized()
    {
        gridItem.EditContext = new(gridItem.Filter);
    }

    public void RowClick(GridRowEventArgs<DEntity> args)
    {
        
        Navigation.NavigateTo($"refbook/group/edit/{args.Item.Key}");
    }

    public async Task UpdateEntitiesAsync()
    {
        await gridItem.Grid.RefreshDataAsync();
    }

    public async Task<GridDataProviderResult<DEntity>> GridDataProvider(GridDataProviderRequest<DEntity> request)
    {
        var skip = (request.PageNumber - 1) * request.PageSize;
        var limit = request.PageSize;

        var config = new ProductsGroupsParamConfig()
            {
                NameLike = gridItem.Filter.SearchString,
                Skip = skip,
                Limit = limit
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsGroupsParamType, ProductsGroupsParamConfig, TEntity>).InitQuery(config);

        return await Task.FromResult(request.ApplyTo(productRepository.GetByQuery(query)));
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;

        public Grid<DEntity> Grid { get; set; } = default!;

        public EditContext? EditContext { get; set; }

        public FilterClass Filter { get; set; } = new();

        public class FilterClass
        {
            public static string TITTLE_CLASS = "col-1 col-md-1";
            public static string VALUE_CLASS = "col-5 col-md-5";

            public string? SearchString { get; set; } = null!;

            public int? GroupId { get; set; } = null!;
        }
    }
}
