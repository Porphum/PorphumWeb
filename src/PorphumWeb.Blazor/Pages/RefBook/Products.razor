@page "/refbook/products/{GroupId:int?}"
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumWeb.Blazor.Classes
@using PorphumWeb.Blazor.Pages.Components

@inject IProductGroupRepository productGroupRepository;
@inject NavigationManager Navigation

<PageTitle>Наименования</PageTitle>
<Offcanvas @ref="offcanvas" Placement="Placement.Start" />

<br/>
<div class="row">
    <Button Class="col-md-1"
            Style="margin-right:1rem;"
            Type="ButtonType.Link"
            Color="ButtonColor.Dark"
            @onclick="@(()=>toggleItem.ToggleAsync())">
        @toggleItem.ButtonTittle
    </Button>
    <Button Class="col-md-1"
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            @onclick="@(()=>Navigation.NavigateTo("refbook/product/create"))">
        Создать
    </Button>
</div>

<Collapse @ref=toggleItem.CollapseItem
          OnHiding="toggleItem.OnHiddenCallback"
          OnShown="toggleItem.OnShownCallback">
    <br />
        <EditForm EditContext="_editContext">
            <div class="row">
                <div class="@FilterClass.TITTLE_CLASS">
                    Название:
                </div>
                <div class="@FilterClass.VALUE_CLASS">
                    <InputText id="search-string" @bind-Value="_filter.SearchString" />
                </div>
            </div>
        <br />
        <div class="row">
            <div class="@FilterClass.TITTLE_CLASS">
                <b>Группа</b>
            </div>
            <div class="@FilterClass.VALUE_CLASS">
                @_filter.GroupId
            </div>
            <div class="@FilterClass.VALUE_CLASS">
                <b><Button Type="ButtonType.Link" Color="ButtonColor.Primary" @onclick="ShowOfCanvas"> Выбрать </Button></b>
            </div>
        </div>
        </EditForm>
</Collapse>
<hr />

<br />

<ProductsTable NameLike=@_filter.SearchString GroupsKeys="@_filter.Groups" />


@code {
    private ToggleClass toggleItem = new();
    private Offcanvas offcanvas = default!;
    private FilterClass _filter = new();
    private EditContext? _editContext;

    private IEnumerable<ProductGroup> _groups = Enumerable.Empty<ProductGroup>();

    [Parameter]
    public int? GroupId { get; set; }

    protected override void OnInitialized()
    {
        _filter.GroupId = GroupId;
        _groups = productGroupRepository.GetEntities();

        _editContext = new(_filter);
    }

    private async Task ShowOfCanvas()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("SelectGroup", EventCallback.Factory.Create<ProductGroup>(this, GroupSelect));
        await offcanvas.ShowAsync<MultiGroupPick>(title: "Выберите группу", parameters: parameters);
    }

    private async Task GroupSelect(ProductGroup group)
    {
        await offcanvas.HideAsync();
        _filter.GroupId = group.Key;

    }

    public class FilterClass
    {
        public static string TITTLE_CLASS = "col-1 col-md-1";
        public static string VALUE_CLASS = "col-5 col-md-5";

        public string? SearchString { get; set; } = null!;

        public int? GroupId { get; set; } = null!;

        public List<int>? Groups => GroupId is null || GroupId == 0 
            ? null
            : new List<int>()
                .Append(GroupId.Value)
                .ToList();
    }
}
