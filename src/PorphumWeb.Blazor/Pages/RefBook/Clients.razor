@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using TEntity = PorphumReferenceBook.Logic.Storage.Models.Client;
@using DEntity = PorphumReferenceBook.Logic.Models.Client.Client;

@inject IClientsQueryRepository repository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation

@page "/refbook/clients"

<PageTitle>Клиенты</PageTitle>
<br />
<div class="row">
    <div class="col-2">
        <h2>Клиенты</h2>
    </div>
    <div class="col-4">
        <Button Type="ButtonType.Link"
                Color="ButtonColor.Primary"
        @onclick="@(()=>Navigation.NavigateTo("refbook/client/create"))">
            Создать
        </Button>
    </div>
</div>
<div class="row">
    <EditForm EditContext="_editContext" OnSubmit="Submit">
        <p>
            Наименование:<br />
            <InputText id="search-string" @bind-Value="_filter.SearchString" />
        </p>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Secondary"> Поиск </Button>
    </EditForm>
</div>

<br />
@if (entities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Наименование</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in entities)
            {
                <tr>
                    <td>@entity.Key</td>
                    <td>@entity.Name</td>
                    <td>
                        <Button Size="Size.Small"
                                Type="ButtonType.Link"
                                Color="ButtonColor.Primary"
                        @onclick="@(()=>Navigation.NavigateTo($"refbook/client/edit/{entity.Key}"))">
                            Редактировать
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<Pagination ActivePageNumber="@CurrentPage"
            TotalPages="@PageLimit"
            Alignment="Alignment.Center"
            FirstLinkIcon="IconName.ChevronDoubleLeft"
            PreviousLinkIcon="IconName.ChevronLeft"
            NextLinkIcon="IconName.ChevronRight"
            LastLinkIcon="IconName.ChevronDoubleRight"
            PageChanged="OnPageChangedAsync" />

@code {
    private Filter _filter = new();
    private EditContext? _editContext;

    private static readonly int PAGE_SIZE = 5;

    public int CurrentPage { get; set; } = 1;

    public int PageLimit { get; set; } = 1;

    private DEntity[]? entities;

    public string? NameLike { get; set; } = null;

    public int IncrementAmount { get; set; } = 1;

    private void UpdateEntities()
    {
        PageLimit = repository.GetLimit();
        
        var config = new ClientsParamConfig()
            {
                NameLike = NameLike,
                Skip = (CurrentPage - 1) * PAGE_SIZE,
                Limit = PAGE_SIZE
            };
        
        var query = (paramFactory as IQueryParamsFactory<ClientsParamType, ClientsParamConfig, TEntity>).InitQuery(config);

        
        entities = repository.GetByQuery(query).ToArray();
    }

    protected override void OnParametersSet()
    {
        UpdateEntities();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    protected override void OnInitialized()
    {
        UpdateEntities();
        _editContext = new(_filter);
    }

    public void Submit()
    {
        NameLike = _filter.SearchString;
        UpdateEntities();
    }

    public class Filter
    {
        public string? SearchString { get; set; } = null!;
    }
}
