@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using PorphumWeb.Blazor.Classes
@using TEntity = PorphumReferenceBook.Logic.Storage.Models.Client;
@using DEntity = PorphumReferenceBook.Logic.Models.Client.Client;

@inject IClientsQueryRepository repository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation

@page "/refbook/clients"

<PageTitle>Клиенты</PageTitle>
<br />
<div class="row">
    <Button Class="col-md-1"
            Style="margin-right:1rem;"
            Type="ButtonType.Link"
            Color="ButtonColor.Dark"
            @onclick="@(()=>toggleItem.ToggleAsync())">
        @toggleItem.ButtonTittle
    </Button>
    <Button Class="col-md-1"
            Type="ButtonType.Link"
            Color="ButtonColor.Primary"
            @onclick="@(()=>Navigation.NavigateTo("refbook/client/create"))">
        Создать
    </Button>
</div>
<Collapse @ref=toggleItem.CollapseItem
          OnHiding="toggleItem.OnHiddenCallback"
          OnShown="toggleItem.OnShownCallback">
    <div class="row">
        <EditForm EditContext="gridItem.EditContext" OnSubmit="UpdateEntities">
            <p>
                Наименование:<br />
                <InputText id="search-string" @bind-Value="gridItem.Filter.SearchString" />
            </p>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Dark"> Поиск </Button>
        </EditForm>
    </div>
</Collapse>
<hr />
<br />
@if (gridItem.Entities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Наименование</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in gridItem.Entities)
            {
                <tr>
                    <td>@entity.Key</td>
                    <td>@entity.Name</td>
                    <td>
                        <Button Size="Size.Small"
                                Type="ButtonType.Link"
                                Color="ButtonColor.Primary"
                                @onclick="@(()=>Navigation.NavigateTo($"refbook/client/edit/{entity.Key}"))">
                            Редактировать
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<Pagination ActivePageNumber="@gridItem.CurrentPage"
            TotalPages="@gridItem.PageLimit"
            Alignment="Alignment.Center"
            FirstLinkIcon="IconName.ChevronDoubleLeft"
            PreviousLinkIcon="IconName.ChevronLeft"
            NextLinkIcon="IconName.ChevronRight"
            LastLinkIcon="IconName.ChevronDoubleRight"
            PageChanged="OnPageChangedAsync" />

@code {    
    private GridClass gridItem = new();

    private ToggleClass toggleItem = new();

    private void UpdateEntities()
    {
        int skipCount, rowsLimit;

        gridItem.UpdateDataForPagination(
            count: repository.GetLimit(),
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );
        
        var config = new ClientsParamConfig()
            {
                NameLike = gridItem.Filter.SearchString,
                Skip = skipCount,
                Limit = rowsLimit
            };
        
        var query = (paramFactory as IQueryParamsFactory<ClientsParamType, ClientsParamConfig, TEntity>).InitQuery(config);

        
        gridItem.Entities = repository.GetByQuery(query).ToArray();
    }

    protected override void OnParametersSet()
    {
        UpdateEntities();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { gridItem.CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    protected override void OnInitialized()
    {
        UpdateEntities();
        gridItem.EditContext = new(gridItem.Filter);
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public EditContext? EditContext { get; set; }

        public FilterClass Filter { get; set; } = new();

        public DEntity[]? Entities { get; set; }

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }

        public class FilterClass
        {
            public string? SearchString { get; set; } = null!;
        }
    }
}
