@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using TProduct = PorphumReferenceBook.Logic.Storage.Models.Product;
@using DProduct = PorphumReferenceBook.Logic.Models.Product.Product;

@inject IProductsQueryRepository repository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation
@inject LinkGenerator LinkGenerator

<Grid @ref="gridItem.Grid"
      TItem="DProduct"
      Class="table table-hover table-bordered table-striped"
      DataProvider="GridDataProvider"
      OnRowDoubleClick="RowClick"
      ItemsPerPageText="some text"
      PageSizeSelectorItems="new int[] {1}"
      PaginationItemsTextFormat=""
      AllowPaging="true"
      AllowRowClick="true"
      EmptyText="Нет данных"
      PageSize="GridClass.PAGE_SIZE"
      Responsive="true">

    <GridColumn TItem="DProduct" HeaderText="Id">
        @context.Key
    </GridColumn>
    <GridColumn TItem="DProduct" HeaderText="Название">
        @context.Name
    </GridColumn>
    <GridColumn TItem="DProduct" HeaderText="Группа">
        @context.Group.Name
    </GridColumn>
    <GridColumn TItem="DProduct" HeaderText="Описание">
        @context.Info.Description
    </GridColumn>
</Grid>

@code {
    private GridClass gridItem = new();

    [Parameter]
    public string? NameLike { get; set; } = null;

    [Parameter]
    public List<int>? GroupsKeys { get; set; } = null;

    private async Task UpdateEntitiesAsync()
    {
        if (gridItem is null || gridItem.Grid is null)
        {
            return;
        }

        await gridItem.Grid.RefreshDataAsync();
    }

    public void RowClick(GridRowEventArgs<DProduct> args)
    {
        Navigation.NavigateTo($"refbook/product/edit/{args.Item.Key}");
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateEntitiesAsync();
    }
    
    public async Task<GridDataProviderResult<DProduct>> GridDataProvider(GridDataProviderRequest<DProduct> request)
    {
        var skip = (request.PageNumber - 1) * request.PageSize;
        var limit = request.PageSize;
        
        var config = new ProductsParamConfig()
            {
                NameLike = NameLike,
                Skip = skip,
                Limit = limit,
                GroupsKeys = GroupsKeys is null ? null : GroupsKeys.ToHashSet()
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TProduct>).InitQuery(config);

        return await Task.FromResult(new GridDataProviderResult<DProduct>
            {
                Data = repository.GetByQuery(query),
                TotalCount = repository.GetLimit()
            });
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;

        public Grid<DProduct> Grid { get; set; }
    }
}
