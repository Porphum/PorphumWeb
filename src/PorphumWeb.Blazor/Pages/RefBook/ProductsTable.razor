@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;

@using TProduct = PorphumReferenceBook.Logic.Storage.Models.Product;
@using DProduct = PorphumReferenceBook.Logic.Models.Product.Product;

@inject IProductsQueryRepository repository;
@inject IRefBookQueryParamFactory paramFactory;
@inject NavigationManager Navigation
@inject LinkGenerator LinkGenerator

@if (gridItem.Entities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Название</th>
                <th>Группа</th>
                <th>Описание</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in gridItem.Entities)
            {
                <tr>
                    <td>@entity.Key</td>
                    <td>@entity.Name</td>
                    <td>@entity.Group.Name</td>
                    <td>@entity.Info.Description</td>
                    <td>
                        <Button Size="Size.Small"
                                Type="ButtonType.Link"
                                Color="ButtonColor.Primary"
                        @onclick="@(()=>Navigation.NavigateTo($"refbook/product/edit/{entity.Key}"))">
                            Редактировать
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination ActivePageNumber="@gridItem.CurrentPage"
                TotalPages="@gridItem.PageLimit"
                Alignment="Alignment.Center"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight"
                PageChanged="OnPageChangedAsync" />
}

@code {
    private GridClass gridItem = new();

    [Parameter]
    public string? NameLike { get; set; } = null;

    [Parameter]
    public List<int>? GroupsKeys { get; set; } = null;

    [Parameter]
    public int IncrementAmount { get; set; } = 1;

    private void UpdateEntities()
    {
        int skipCount, rowsLimit;

        gridItem.UpdateDataForPagination(
            count: repository.GetLimit(),
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );


        var config = new ProductsParamConfig()
            {
                NameLike = NameLike,
                Skip = skipCount,
                Limit = rowsLimit,
                GroupsKeys = GroupsKeys is null ? null : GroupsKeys.ToHashSet()
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TProduct>).InitQuery(config);


        gridItem.Entities = repository.GetByQuery(query).ToArray();
    }

    protected override void OnParametersSet()
    {
        UpdateEntities();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { gridItem.CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    protected override void OnInitialized() => UpdateEntities();

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public DProduct[]? Entities { get; set; }

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }
    }
}
