@page "/refbook/group/{type}/{ProductId:int?}"
@using General.Abstractions.Storage;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Models.Product;

@inject IProductGroupRepository repository;
@inject NavigationManager Navigation

@using DProduct = PorphumReferenceBook.Logic.Models.Product.ProductGroup;

<PageTitle>@Title</PageTitle>
<ConfirmDialog @ref="dialog" />
<br />
<div class="row">
    <div class=row>
        <div class="col-2 col-md-2">
            <h2>@Title</h2>
        </div>
        @if (_viewModel.isEdit)
        {
            <div class="col-3 col-md-3">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Danger" @onclick="@(() => DeleteAsync(_editContext))"> Удалить </Button>
            </div>
        }
    </div>
    <EditForm EditContext="_editContext">
        <br />
        <input type="hidden" @bind-value="_viewModel.isEdit" />
        @if (_viewModel.isEdit)
        {
            <div class="row">
                <div class="col-1 col-md-1">
                    <b>Id</b>
                </div>
                <div class="col-5 col-md-5">
                    <InputNumber id="id" @bind-Value="_viewModel.Key" readonly="readonly" />
                </div>
                
            </div>
        }
        <br/>
        <div class="row">
            <div class="col-1 col-md-1">
                <b>Название</b>
            </div>
            <div class="col-5 col-md-5">
                <InputText id="name" @bind-Value="_viewModel.Name" />
            </div>
        </div>
        <hr />
        <br/>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Сохранить </Button>
    </EditForm>
</div>

@code {
    private ConfirmDialog dialog = default!;

    public string Title { get; set; } = "Default tittle";
    [Parameter]
    [EditorRequired]
    public string Type { get; set; } = null!;

    [Parameter]
    public int? ProductId { get; set; } = null!;

    private EditContext? _editContext;
    private ViewModel _viewModel = new();

    protected override void OnInitialized()
    {
        if (Type == "create")
        {
            Title = "Добавить новую группу";
        }
        else if (Type == "edit")
        {
            Title = "Группа";

            var product = repository.GetByKey(ProductId ?? throw new InvalidOperationException()) ?? throw new InvalidOperationException();

            _viewModel = new()
                {
                    isEdit = true,
                    Key = product.Key,
                    Name = product.Name
                };
        }
        else
        {
            throw new InvalidOperationException();
        }

        _editContext = new(_viewModel);
    }

    private async void DeleteAsync(EditContext formContext)
    {
        if (_viewModel.isEdit)
        {
            var entity = repository.GetByKey(_viewModel.Key) ?? throw new InvalidOperationException();

            var confirmation = await dialog.ShowAsync(
                title: "Вы уверены, что вы хотите удалть?",
                message1: "После удаления нельзя будет вернуться.",
                message2: "Выполнить?");

            if (!confirmation)
            {
                return;
            }
            
            repository.Delete(entity);

            Navigation.NavigateTo("refbook/groups");
            return;
        }

        throw new InvalidOperationException();
    }

    private void Submit(EditContext formContext)
    {
        if (_viewModel.isEdit)
        {
            var product = repository.GetByKey(_viewModel.Key) ?? throw new InvalidOperationException();

            var newProduct = new DProduct(
                product.Key,
                _viewModel.Name ?? throw new InvalidOperationException()
            );

            repository.Update(newProduct);
        }
        else
        {
            var newProduct = new DProduct(
                0,
                _viewModel.Name ?? throw new InvalidOperationException()
            );

            repository.Add(newProduct);
        }

        Navigation.NavigateTo("refbook/groups");
    }

    public class ViewModel
    {
        public bool isEdit { get; set; } = false;

        public int Key { get; set; }

        public string? Name { get; set; }
    }
}
