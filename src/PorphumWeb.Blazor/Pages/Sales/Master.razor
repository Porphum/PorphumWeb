@page "/sales/master"
@using BlazorBootstrap;
@using General.Abstractions.Models;
@using General.Abstractions.Storage.Query;
@using General;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions;
@using PorphumReferenceBook.Logic.Models.Client;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumSales.Logic.Abstractions.Storage.Repository;

@using PorphumSales.Logic.Models.Mapper;
@using TEntity = PorphumSales.Logic.Storage.Models.ProductPrice;
@using DEntity = PorphumSales.Logic.Models.Document.DocumentConfig;
@using DProduct = PorphumReferenceBook.Logic.Models.Client.Client;

@inject IDocumentRepository repository;
@inject IReferenceBookMapper _referenceBookMapper;

<PageTitle>Master</PageTitle>
<div class=row>
    <div class="col-2 col-md-2">
        <h2>Master</h2>
    </div>
</div>
<br/>
<EditForm EditContext="_editContext">
    <div class="row">
        @if (MasterClient is not null)
        {
            <div class="col-2 col-md-2">
                <h3><b>Master Клиент</b></h3>
            </div>
            <div class="col-5 col-md-5">
                <PorphumWeb.Blazor.Pages.Components.MapClient Entity="@MasterClient" />
            </div>
        }
        else
        {
            <div class="col-2 col-md-2">
                Master Клиент не задан
            </div>
        }
    </div>
    <input type="hidden" @bind-value="_view.ClientId" />
    <br />
    <div class="row">
        <ClientsFinder ExternalMethod=Product ParntEditContext="_editContext" />
    </div>
    <hr />
    <br />
    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Сохранить </Button>
</EditForm>

@code {
    private IMappableModel<Client, long>? MasterClient { get; set; }

    private readonly int PAGE_SIZE = 5;

    private int _skipCount = 0;

    private DEntity[]? entities;

    private EditContext? _editContext;

    private ViewModel _view = new();

    //private Collapse collapse = default!;
    //private async Task ShowContentAsync() => await collapse.ShowAsync();
    //private async Task HideContentAsync() => await collapse.HideAsync();
    //private async Task ToggleContentAsync() => await collapse.ToggleAsync();

    public string Input { get; set; } = string.Empty;
    private void Product(long id, EditContext _context)
    {
        _view.ClientId = id;

        MasterClient = _referenceBookMapper.MapEntity(new MappableModel<DProduct, long>(_view.ClientId));
    }

    private void Submit(EditContext _context)
    {
        var entity = new DEntity(
            0,
            _referenceBookMapper.MapEntity(new MappableModel<DProduct, long>(_view.ClientId))
        );


        repository.Config = entity;
    }

    protected override void OnInitialized()
    {
        var config = repository.Config;

        if (config is not null)
        {
            _view.ClientId = config.Master.MapKey;
            MasterClient = config.Master;
        }

        _editContext = new(_view);
    }

    private void IncrementCount()
    {
        _skipCount += 1;
    }

    private void DecrementCount()
    {
        if (_skipCount == 0)
        {
            return;
        }
        _skipCount -= 1;
    }

    public class ViewModel
    {
        public long ClientId { get; set; }
    }
}
