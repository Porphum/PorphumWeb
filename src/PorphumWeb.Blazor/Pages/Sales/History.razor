@using General.Abstractions.Models;
@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Abstractions;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumSales.Logic.Abstractions.Storage.Repository;
@using PorphumSales.Logic.Models.Mapper;
@using PorphumSales.Logic.Models.Sales;
@using PorphumSales.Logic.Storage.Models;
@using PorphumWeb.Blazor.Classes

@inject IHistoryRepository repository;
@inject ISalesQueryParamFactory paramFactory;
@inject IReferenceBookMapper _referenceBookMapper;
@inject NavigationManager Navigation

@page "/sales/history/{ProductId:long}"

<PageTitle>История</PageTitle>
<br />
<div class="row">
    @if (SelectedProduct is not null)
    {
        <div class="col-2 col-md-2">
            <h3><b>Наименование</b></h3>
        </div>
        <div class="col-5 col-md-5">
            <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@SelectedProduct" />
        </div>
    }
    else
    {
        <div class="col-2 col-md-2">
            Наименование не задано
        </div>
    }
</div>
<br/>
<Button Type="ButtonType.Button" Color="ButtonColor.Dark" @onclick="@(()=>toggleItem.ToggleAsync())">
    @toggleItem.ButtonTittle
</Button>
<Collapse @ref="toggleItem.CollapseItem"
          OnHiding="toggleItem.OnHiddenCallback"
          OnShown="toggleItem.OnShownCallback">
    <br />
    <hr />
<EditForm EditContext="_editContext">
        <div class="row">
            <div class="col-1 col-md-1">
                <b>На сколько</b>
            </div>
            <div class="col-5 col-md-5">
                <InputNumber id="delta" @bind-Value="_view.Delta" />
            </div>
        </div>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Изменить </Button>
</EditForm>
</Collapse>
<br />
<hr />
@if (gridItem.Entities is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Дата</th>
                <th>Изменение</th>
                <th>Тип</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in gridItem.Entities)
            {
                <tr>
                    <td>@entity.AccurDate</td>
                    <td>@entity.Delta</td>
                    <td>@entity.Type</td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination ActivePageNumber="@gridItem.CurrentPage"
                TotalPages="@gridItem.PageLimit"
                Alignment="Alignment.Center"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight"
                PageChanged="OnPageChangedAsync" />
}



@code {
    private IMappableModel<Product, long>? SelectedProduct { get; set; }
    
    private GridClass gridItem = new();
    private ToggleClass toggleItem = new(showTittle: "Изменить колличество"); 

    [Parameter]
    [EditorRequired]
    public long ProductId { get; set; }

    private EditContext? _editContext;

    private ViewModel _view = new();

    private void UpdateEntities()
    {
        int skipCount, rowsLimit;

        gridItem.UpdateDataForPagination(
            count: repository.GetLimit(),
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );

        var config = new ProductsHistoriesParamConfig()
        {
            OfProductId = ProductId,
            Skip = skipCount,
            Limit = rowsLimit
        };

        var query = (paramFactory as IQueryParamsFactory<ProductsHistoriesParamType, ProductsHistoriesParamConfig, ProductCountHistory>).InitQuery(config);

        gridItem.Entities = repository.GetByQuery(query).ToArray();
    }

    public async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { gridItem.CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    protected override void OnInitialized()
    {
        SelectedProduct = _referenceBookMapper.MapEntity(new MappableModel<Product, long>(ProductId));
        _editContext = new(_view);
        UpdateEntities();
    }

    public async Task Submit(EditContext? editContext)
    {
        var delta = new ProductHistory(
            _referenceBookMapper.MapEntity(new MappableModel<Product, long>(ProductId)),
            _view.Delta,
            DateTime.Now
        );

        repository.ManualWrite(delta);
        await toggleItem.CollapseItem.HideAsync();
        Navigation.NavigateTo($"sales/storage");
    }

    public class ViewModel
    {
        public int Delta { get; set; } = 0;
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public EditContext? EditContext { get; set; }

        public ProductHistory[]? Entities { get; set; }

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }
    }
}
