@using General.Abstractions.Models;
@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Abstractions;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumSales.Logic.Abstractions.Storage.Repository;
@using PorphumSales.Logic.Models.Mapper;
@using PorphumSales.Logic.Models.Sales;
@using PorphumSales.Logic.Storage.Models;
@using PorphumWeb.Blazor.Classes

@inject IHistoryRepository repository;
@inject ISalesQueryParamFactory paramFactory;
@inject IReferenceBookMapper _referenceBookMapper;
@inject NavigationManager Navigation

@page "/sales/history/{ProductId:long}"

<PageTitle>История</PageTitle>
<br />
<div class="row">
    @if (SelectedProduct is not null)
    {
        <div class="col-3 col-md-3">
            <h3><b>Наименование</b></h3>
        </div>
        <div class="col-5 col-md-5">
            <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@SelectedProduct" />
        </div>
    }
    else
    {
        <div class="col-2 col-md-2">
            Наименование не задано
        </div>
    }
</div>
<br/>
<Button Type="ButtonType.Button" Color="ButtonColor.Dark" @onclick="@(()=>toggleItem.ToggleAsync())">
    @toggleItem.ButtonTittle
</Button>
<Collapse @ref="toggleItem.CollapseItem"
          OnHiding="toggleItem.OnHiddenCallback"
          OnShown="toggleItem.OnShownCallback">
    <br />
    <hr />
<EditForm EditContext="_editContext">
        <div class="row">
            <div class="col-1 col-md-1">
                <b>На сколько</b>
            </div>
            <div class="col-5 col-md-5">
                <InputNumber id="delta" @bind-Value="_view.Delta" />
            </div>
        </div>
        <br />
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Изменить </Button>
</EditForm>
</Collapse>
<br />
<hr />
<Grid @ref="gridItem.Grid"
      TItem="ProductHistory"
      Class="table table-hover table-bordered table-striped"
      DataProvider="GridDataProvider"
      ItemsPerPageText="some text"
      PageSizeSelectorItems="new int[] {1}"
      PaginationItemsTextFormat=""
      AllowPaging="true"
      EmptyText="Нет данных"
      PageSize="GridClass.PAGE_SIZE"
      Responsive="true">

    <GridColumn TItem="ProductHistory" HeaderText="Дата">
        @context.AccurDate
    </GridColumn>
    <GridColumn TItem="ProductHistory" HeaderText="Изменение">
        @context.Delta
    </GridColumn>
    <GridColumn TItem="ProductHistory" HeaderText="Тип">
        @context.Type
    </GridColumn>
</Grid>
    




@code {
    private IMappableModel<Product, long>? SelectedProduct { get; set; }

    private GridClass gridItem = new();
    private ToggleClass toggleItem = new(showTittle: "Изменить количество"); 

    [Parameter]
    [EditorRequired]
    public long ProductId { get; set; }

    private EditContext? _editContext;

    private ViewModel _view = new();

    protected override void OnInitialized()
    {
        SelectedProduct = _referenceBookMapper.MapEntity(new MappableModel<Product, long>(ProductId));
        _editContext = new(_view);
    }

    public async Task Submit(EditContext? editContext)
    {
        var delta = new ProductHistory(
            _referenceBookMapper.MapEntity(new MappableModel<Product, long>(ProductId)),
            _view.Delta,
            DateTime.Now
        );

        repository.ManualWrite(delta);
        await toggleItem.CollapseItem.HideAsync();
        await gridItem.Grid.RefreshDataAsync();
        _view = new();
    }

    public async Task<GridDataProviderResult<ProductHistory>> GridDataProvider(GridDataProviderRequest<ProductHistory> request)
    {
        var skip = (request.PageNumber - 1) * request.PageSize;
        var limit = request.PageSize;

        var config = new ProductsHistoriesParamConfig()
            {
                OfProductId = ProductId,
                Skip = skip,
                Limit = limit
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsHistoriesParamType, ProductsHistoriesParamConfig, ProductCountHistory>).InitQuery(config);

        return await Task.FromResult(new GridDataProviderResult<ProductHistory>
            {
                Data = repository.GetByQuery(query),
                TotalCount = repository.GetLimit()
            });
    }

    public class ViewModel
    {
        public int Delta { get; set; } = 0;
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;

        public Grid<ProductHistory> Grid { get; set; } = default!;
    }
}
