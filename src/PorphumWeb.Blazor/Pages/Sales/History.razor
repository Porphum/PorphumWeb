@using General.Abstractions.Models;
@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Abstractions;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumSales.Logic.Abstractions.Storage.Repository;
@using PorphumSales.Logic.Models.Mapper;
@using PorphumSales.Logic.Models.Sales;
@using PorphumSales.Logic.Storage.Models;

@inject IHistoryRepository repository;
@inject ISalesQueryParamFactory paramFactory;
@inject IReferenceBookMapper _referenceBookMapper;
@inject NavigationManager Navigation

@page "/sales/history/{ProductId:long}"

<PageTitle>История</PageTitle>

<h2>История</h2>
<br />
<div class="row">
    @if (SelectedProduct is not null)
    {
        <div class="col-2 col-md-2">
            <h3><b>Наименование</b></h3>
        </div>
        <div class="col-5 col-md-5">
            <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@SelectedProduct" />
        </div>
    }
    else
    {
        <div class="col-2 col-md-2">
            Наименование не задано
        </div>
    }
</div>
<br/>
<Button Type="ButtonType.Button" Color="ButtonColor.Dark" @onclick="@(() => ShowAsync(true))"> Изменить колличество </Button>
<Collapse @ref="collapse">
    <br />
    <hr />
<EditForm EditContext="_editContext">
        <div class="row">
            <div class="col-1 col-md-1">
                <b>На сколько</b>
            </div>
            <div class="col-5 col-md-5">
                <InputNumber id="delta" @bind-Value="_view.Delta" />
            </div>
        </div>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Изменить </Button>
</EditForm>
</Collapse>
<br />
<hr />
@if (entities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Дата</th>
                <th>Изменение</th>
                <th>Тип</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in entities)
            {
                <tr>
                    <td>@entity.AccurDate</td>
                    <td>@entity.Delta</td>
                    <td>@entity.Type</td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination ActivePageNumber="@CurrentPage"
                TotalPages="@PageLimit"
                Alignment="Alignment.Center"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight"
                PageChanged="OnPageChangedAsync" />
}



@code {
    private IMappableModel<Product, long>? SelectedProduct { get; set; }
    private Collapse collapse = default!;

    [Parameter]
    [EditorRequired]
    public long ProductId { get; set; }

    private EditContext? _editContext;

    private ViewModel _view = new();

    private static readonly int PAGE_SIZE = 5;

    public int CurrentPage { get; set; } = 1;

    public int PageLimit { get; set; } = 1;

    private ProductHistory[]? entities;

    private void UpdateEntities()
    {
        PageLimit = repository.GetLimit();

        var query = (paramFactory as IQueryParamsFactory<ProductsHistoriesParamType, ProductsHistoriesParamConfig, ProductCountHistory>).InitQuery();

        var config = new ProductsHistoriesParamConfig()
            {
                OfProductId = ProductId,
                Skip = (CurrentPage - 1) * PAGE_SIZE,
                Limit = PAGE_SIZE
            };

        query.Append((paramFactory as IQueryParamsFactory<ProductsHistoriesParamType, ProductsHistoriesParamConfig, ProductCountHistory>).CreateParam(ProductsHistoriesParamType.OfProductId, config));

        query.Append((paramFactory as IQueryParamsFactory<ProductsHistoriesParamType, ProductsHistoriesParamConfig, ProductCountHistory>).CreateParam(ProductsHistoriesParamType.Skip, config));
        query.Append((paramFactory as IQueryParamsFactory<ProductsHistoriesParamType, ProductsHistoriesParamConfig, ProductCountHistory>).CreateParam(ProductsHistoriesParamType.Limit, config));

        entities = repository.GetByQuery(query).ToArray();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    protected override void OnInitialized()
    {
        SelectedProduct = _referenceBookMapper.MapEntity(new MappableModel<Product, long>(ProductId));
        _editContext = new(_view);
        UpdateEntities();
    }

    public async Task Submit(EditContext? editContext)
    {
        var delta = new ProductHistory(
            _referenceBookMapper.MapEntity(new MappableModel<Product, long>(ProductId)),
            _view.Delta,
            DateTime.Now
        );

        repository.ManualWrite(delta);
        await ShowAsync(false);
        Navigation.NavigateTo($"sales/storage");
    }

    private async Task ShowAsync(bool isShow)
    {
        if (isShow)
        {
            await collapse.ShowAsync();
        }
        else
        {
            await collapse.HideAsync();
        }
    }

    public class ViewModel
    {
        public int Delta { get; set; } = 0;
    }
}
