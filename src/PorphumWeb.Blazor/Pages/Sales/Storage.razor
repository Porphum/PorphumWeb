@using General.Abstractions.Storage;
@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Models.Product;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumSales.Logic.Abstractions.Storage.Repository;
@using PorphumSales.Logic.Models.Sales;
@using PorphumSales.Logic.Storage.Models;

@inject IStorageRepository repository;
@inject ISalesQueryParamFactory paramFactory;
@inject NavigationManager Navigation

@page "/sales/storage"

<PageTitle>Склад</PageTitle>

<h2>Склад</h2>
<br />
@if (_gridItem.Entities is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Наименование</th>
                <th>Колличество</th>
                <th>Дата изменения</th>
                <th>История</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _gridItem.Entities)
            {
                <tr>
                    <td><PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@product.Product" /></td>
                    <td>@product.Count</td>
                    <td>@product.LastUpdate</td>
                    <td>
                        <Button Size="Size.Small"
                                Type="ButtonType.Link"
                                Color="ButtonColor.Primary"
                        @onclick="@(()=>Navigation.NavigateTo($"sales/history/{product.Product.MapKey}"))">
                            Посмотреть
                        </Button></td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination ActivePageNumber="@_gridItem.CurrentPage"
                TotalPages="@_gridItem.PageLimit"
                Alignment="Alignment.Center"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight"
                PageChanged="OnPageChangedAsync" />
}



@code {
    private EditContext? _editContext;

    private GridClass _gridItem = new();

    private void UpdateEntities()
    {
        int skipCount, rowsLimit;

        _gridItem.UpdateDataForPagination(
            count: (repository as IQueryableRepository<StorageProduct, ProductStorage>).GetLimit(),
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );

        var config = new ProductsStoragesParamConfig()
            {
                Skip = skipCount,
                Limit = rowsLimit
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsStoragesParamType, ProductsStoragesParamConfig, ProductStorage>).InitQuery(config);

        _gridItem.Entities = repository.GetByQuery(query).ToArray();
    }

    public async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _gridItem.CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    protected override void OnInitialized()
    {
        UpdateEntities();
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public StorageProduct[]? Entities { get; set; }

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }
    }
}
