@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using TProduct = PorphumReferenceBook.Logic.Storage.Models.Product;
@using DProduct = PorphumReferenceBook.Logic.Models.Product.Product;

@inject IProductsQueryRepository productRepository;
@inject IRefBookQueryParamFactory paramFactory;

<div class="row">
    <EditForm EditContext="_editContext">
        <p>
            SearchString:<br />
            <InputText id="search-string" @bind-Value="_filter.SearchString" />
        </p>
        <button type="submit" class="btn btn-primary" @onclick="@(() => Submit(_editContext))">Find</button>
    </EditForm>

    @if(products is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@($"{product.Key} - {product.Group.Name} - {product.Name}")</td>

                        <td><button @onclick="@(() => SelectOn(product.Key, _editContext, ParntEditContext))">AddPrice</button></td>
                    </tr>
                }
            </tbody>
        </table>
        <p role="status">
            <button class="btn btn-primary" @onclick="DecrementCount">Prev</button>
            @(_skipCount + 1)
            <button class="btn btn-primary" @onclick="IncrementCount">Next</button>
        </p>
    }

</div>

@code {
    private readonly int PAGE_SIZE = 5;

    private int _skipCount = 0;

    private DProduct[]? products;
    private Filter _filter = new();
    private EditContext? _editContext;

    [Parameter]
    [EditorRequired]
    public EditContext? ParntEditContext { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Action<long, EditContext> ExternalMethod { get; set; } = null!;

    public string? SearchString { get; set; }

    private void SearchProducts()
    {
        var query = (paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TProduct>).InitQuery();

        var config = new ProductsParamConfig()
            {
                NameLike = _filter.SearchString,
                Skip = _skipCount * PAGE_SIZE,
                Limit = PAGE_SIZE
            };

        if (config.NameLike is not null)
        {
            query.Append((paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TProduct>).CreateParam(ProductsParamType.NameLike, config));
        }

        query.Append((paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TProduct>).CreateParam(ProductsParamType.Skip, config));
        query.Append((paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TProduct>).CreateParam(ProductsParamType.Limit, config));

        products = productRepository.GetByQuery(query).ToArray();
    }

    public void SelectOn(long id, EditContext? _editContext, EditContext _parent)
    {
        _filter.SearchString = null;
        Submit(_editContext);

        ExternalMethod.Invoke(id, _parent);
    }

    public void Submit(EditContext? _editContext)
    {
        if (string.IsNullOrWhiteSpace(_filter.SearchString))
        {
            products = null;
            return;
        }

        SearchProducts();
    }

    protected override void OnInitialized()
    {
        _editContext = new(_filter);
    }

    private void DecrementCount()
    {
        if (_skipCount == 0)
        {
            return;
        }
        _skipCount -= 1;

        SearchProducts();
    }

    private void IncrementCount()
    {
        _skipCount += 1;

        SearchProducts();
    }

    public class Filter
    {
        public string? SearchString { get; set; } = null!;
    }
}
