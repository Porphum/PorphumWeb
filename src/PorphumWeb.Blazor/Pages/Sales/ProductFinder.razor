@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using TEntity = PorphumReferenceBook.Logic.Storage.Models.Product;
@using DEntity = PorphumReferenceBook.Logic.Models.Product.Product;

@inject IProductsQueryRepository repository;
@inject IRefBookQueryParamFactory paramFactory;

<div class="row">
    <div class="col-3 col-md-3">
        <button class="btn btn-dark" @onclick="@(() => ShowAsync(true))">Задать</button>
    </div>
</div>
<Collapse @ref="collapse1">
    <hr />
<div class="row">
    <EditForm EditContext="_editContext">
        <p>
            Наименование:<br />
            <InputText id="search-string" @bind-Value="_filter.SearchString" />
        </p>
        <button type="submit" class="btn btn-primary" @onclick="@(() => Submit(_editContext))">Поиск</button>
    </EditForm>

    @if(entities is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Наименование</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var entity in entities)
                {
                    <tr>
                            <td>@($"{entity.Key} - {entity.Group.Name} - {entity.Name}")</td>

                            <td><button class="btn btn-dark"
                                @onclick="@(() => SelectOnAsync(entity.Key, _editContext, ParntEditContext))">Выбрать</button></td>
                    </tr>
                }
            </tbody>
        </table>
        <p role="status">
            <button class="btn btn-primary" @onclick="DecrementCount">Prev</button>
            @(_skipCount + 1)
            <button class="btn btn-primary" @onclick="IncrementCount">Next</button>
        </p>
    }

    </div>
    <hr />
</Collapse>

@code {
    private Collapse collapse1 = default!;
    private readonly int PAGE_SIZE = 5;

    private int _skipCount = 0;

    private DEntity[]? entities;
    private Filter _filter = new();
    private EditContext? _editContext;

    [Parameter]
    [EditorRequired]
    public EditContext? ParntEditContext { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Action<long, EditContext> ExternalMethod { get; set; } = null!;

    public string? SearchString { get; set; }

    private void SearchProducts()
    {
        var config = new ProductsParamConfig()
            {
                NameLike = _filter.SearchString,
                Skip = _skipCount * PAGE_SIZE,
                Limit = PAGE_SIZE
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsParamType, ProductsParamConfig, TEntity>).InitQuery(config);

        entities = repository.GetByQuery(query).ToArray();
    }

    public async void SelectOnAsync(long id, EditContext? _editContext, EditContext _parent)
    {
        _filter.SearchString = null;
        Submit(_editContext);
        ExternalMethod.Invoke(id, _parent);
        await ShowAsync(false);
    }

    public void Submit(EditContext? _editContext)
    {
        if (string.IsNullOrWhiteSpace(_filter.SearchString))
        {
            entities = null;
            return;
        }

        SearchProducts();
    }

    protected override void OnInitialized()
    {
        _editContext = new(_filter);
    }

    private void DecrementCount()
    {
        if (_skipCount == 0)
        {
            return;
        }
        _skipCount -= 1;

        SearchProducts();
    }

    private async Task ShowAsync(bool isShow)
    {
        if (isShow)
        {
            await collapse1.ShowAsync();
        }
        else
        {
            await collapse1.HideAsync();
        }
    }

    private void IncrementCount()
    {
        _skipCount += 1;

        SearchProducts();
    }

    public class Filter
    {
        public string? SearchString { get; set; } = null!;
    }
}
