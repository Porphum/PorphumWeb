@page "/sales/prices"
@using BlazorBootstrap;
@using General.Abstractions.Models;
@using General.Abstractions.Storage.Query;
@using General;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumSales.Logic.Abstractions.Storage.Repository;

@using PorphumSales.Logic.Models.Mapper;
@using PorphumWeb.Blazor.Classes
@using PorphumWeb.Blazor.Pages.Components
@using TEntity = PorphumSales.Logic.Storage.Models.ProductPrice;
@using DEntity = PorphumSales.Logic.Models.Sales.PriceableProduct;
@using DProduct = PorphumReferenceBook.Logic.Models.Product.Product;
@using static PorphumWeb.Blazor.Pages.Components.ProductFinder

@inject IPriceRepository repository;
@inject IReferenceBookMapper _referenceBookMapper;
@inject ISalesQueryParamFactory paramFactory;

<PageTitle>Цены</PageTitle>
<Modal @ref="productFind" />
<h2>Цены</h2>
<br />
<Button Type="ButtonType.Button" Color="ButtonColor.Dark" @onclick="@(() => toggleItem.ToggleAsync())">@toggleItem.ButtonTittle</Button>
<Collapse @ref=toggleItem.CollapseItem
          OnHiding="toggleItem.OnHiddenCallback"
          OnShown="toggleItem.OnShownCallback">
<hr/>
<EditForm EditContext="_editContext">
        <Button Size="Size.Small"
                Type="ButtonType.Link"
                Color="ButtonColor.Dark"
                @onclick="() => PickProductAsync()">
            Задать
        </Button> <br />
    <input type="hidden" @bind-value="_view.ProductId" />
    <div class="row">
            <div class="col-2 col-md-2">
                <h3><b>Наименование</b></h3>
            </div>
            <div class="col-5 col-md-5">
                <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@SelectedProduct" />
            </div>
    </div>
    <br />
    <div class="row">
        <div class="col-1 col-md-1">
            <b>Цена</b>
        </div>
        <div class="col-5 col-md-5">
            <CurrencyInput 
                TValue="decimal" 
                Locale="ru-RU"
                id="price" 
                @bind-Value="_view.Price" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-1 col-md-1">
            <b>С даты</b>
        </div>
        <div class="col-5 col-md-5">
            <DateInput TValue="DateTime" id="from-date" @bind-Value="_view.From" />
        </div>
    </div>
    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" @onclick="@(() => Submit(_editContext))"> Добавить </Button>
</EditForm>
</Collapse>
<br/>
<hr/>

<table class="table">
    <thead>
        <tr>
            <th>Наименование</th>
            <th>Цена</th>
            <th>С даты</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entity in entities!)
        {
            <tr>
                <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@entity.Product" />
                <td>@entity.Price</td>
                <td>@entity.FromDate</td>
            </tr>
        }
    </tbody>
</table>
<Pagination ActivePageNumber="@gridItem.CurrentPage"
            TotalPages="@gridItem.PageLimit"
            Alignment="Alignment.Center"
            FirstLinkIcon="IconName.ChevronDoubleLeft"
            PreviousLinkIcon="IconName.ChevronLeft"
            NextLinkIcon="IconName.ChevronRight"
            LastLinkIcon="IconName.ChevronDoubleRight"
            PageChanged="OnPageChangedAsync" />

@code {
    private Modal productFind = default!;
    private GridClass gridItem = new();
    private ToggleClass toggleItem = new(showTittle: "Добавить цену");
    
    private IMappableModel<DProduct, long>? SelectedProduct { get; set; }

    private DEntity[]? entities;

    private EditContext? _editContext;

    private ViewModel _view = new();

    private Collapse collapse = default!;

    public string Input { get; set; } = string.Empty;
    private async Task PickProductAsync()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<ProductFindEventArgs>(this, ProductAsync));
        await productFind.ShowAsync<ProductFinder>(title: "Выбрать клиента:", parameters: parameters);
    }

    private async Task ProductAsync(ProductFindEventArgs product)
    {
        await productFind.HideAsync();
        _view.ProductId = product.Entity.Key;
        SelectedProduct = _referenceBookMapper.MapEntity(new MappableModel<DProduct, long>(_view.ProductId));

    }

    private async Task Submit(EditContext _context)
    {
        var entity = new DEntity(
            _referenceBookMapper.MapEntity(new MappableModel<DProduct, long>(_view.ProductId)),
            new Money(_view.Price),
            _view.From
        );

        repository.AddNewPrice(entity);

        await toggleItem.CollapseItem.HideAsync();

        UpdateEntities();

    }

    protected override void OnInitialized()
    {
        _editContext = new(_view);
        UpdateEntities();
    }

    private void UpdateEntities()
    {
        int skipCount, rowsLimit;

        gridItem.UpdateDataForPagination(
            count: repository.GetLimit(),
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );

        var config = new ProductsPricesParamConfig()
            {
                Skip = skipCount,
                Limit = rowsLimit
            };

        var query = (paramFactory as IQueryParamsFactory<ProductsPricesParamType, ProductsPricesParamConfig, TEntity>).InitQuery(config);

        entities = repository.GetByQuery(query).ToArray();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { gridItem.CurrentPage = newPageNumber; });

        UpdateEntities();
    }

    public class ViewModel
    {
        public long ProductId { get; set; }
        public DateTime From { get; set; } = DateTime.Now;
        public decimal Price { get; set; } = 0;
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public DEntity[]? Entities { get; set; }

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }
    }
}
