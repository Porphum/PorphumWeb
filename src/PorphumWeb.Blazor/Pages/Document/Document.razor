@page "/document/{documentId:long}"
@using General
@using General.Abstractions.Models
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query
@using PorphumReferenceBook.Logic.Models.Client
@using PorphumReferenceBook.Logic.Models.Product
@using PorphumSales.Logic.Abstractions.Models
@using PorphumSales.Logic.Abstractions.Storage.Repository;

@using PorphumSales.Logic.Models
@using PorphumWeb.Blazor.Pages.Components
@using TEntity = PorphumSales.Logic.Storage.Models.Document;
@using DEntity = PorphumSales.Logic.Models.Document.Document;
@using DClient = PorphumReferenceBook.Logic.Models.Client.Client;
@using static PorphumWeb.Blazor.Pages.Components.DocumentAddProduct
@using static PorphumWeb.Blazor.Pages.Components.ProductFinder

@inject NavigationManager Navigation
@inject IDocumentRepository repository;
@inject ISalesQueryParamFactory paramFactory;
@inject IDocumentStateMachine _documentSateMachine;
@inject IProductStatePicker statePicker;

<Modal @ref="modal" />
<PageTitle>@model.PageTittle</PageTitle>

<div class="row">
    <h2>
        @model.Tittle
    </h2>
</div>
<div class="row">
    <div class="@ViewModel.TITTLE_STYLE">
        <h3>
            <b>
                Клиент
            </b>
        </h3>

    </div>
    <div class="@ViewModel.CONTENT_STYLE">
        <h4><PorphumWeb.Blazor.Pages.Components.MapClient Entity="model.Client"/></h4>
    </div>
</div>
<div class="row">
    <div class="@ViewModel.TITTLE_STYLE">
        <h3>
            <b>
                Состояние
            </b>
        </h3>

    </div>
    <div class="@ViewModel.CONTENT_STYLE">
        <h4><PorphumWeb.Blazor.Pages.Components.DocumentStateDisplay State="model.Entity.State" /></h4>
    </div>
</div>
<div class="row">
    <div class="@ViewModel.TITTLE_STYLE">
        <h3>
            <b>
                Сумма
            </b>
        </h3>

    </div>
    <div class="@ViewModel.CONTENT_STYLE">
        <h4><PorphumWeb.Blazor.Pages.Components.MoneyDisplay Money="model.Entity.Fill.Sum" /></h4>
    </div>
</div>
<hr />
<br/>
<div class="row">
    @foreach (var button in StateButtons)
    {
        if (button.OnClick is null)
        {
            <Button Class=@button.Class
                    Style=@button.Style
                    Type=@button.Type
                    Color=@button.Color
                    @onclick="@(button.OnClickAsync)">
                @button.Tittle
            </Button>
        }
        else
        {
            <Button Class=@button.Class
                    Style=@button.Style
                    Type=@button.Type
                    Color=@button.Color
                    @onclick="@(button.OnClick)">
                @button.Tittle
            </Button>
        }

    }
</div>
<br />
<Grid @ref="gridItem.Grid"
      TItem="GridClass.GridItem"
      Class="table table-hover table-bordered table-striped"
      DataProvider="GridDataProvider"
      OnRowDoubleClick="RowClick"
      ItemsPerPageText="some text"
      PageSizeSelectorItems="new int[] {1}"
      PaginationItemsTextFormat=""
      AllowPaging="true"
      AllowRowClick="true"
      EmptyText="Нет данных"
      PageSize="GridClass.PAGE_SIZE"
      Responsive="true">

    <GridColumn TItem="GridClass.GridItem" HeaderText="Наименование">
        <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="context.Entity.Product" />
    </GridColumn>
    <GridColumn TItem="GridClass.GridItem" HeaderText="Количество">
        @context.Entity.Quantity
    </GridColumn>
    <GridColumn TItem="GridClass.GridItem" HeaderText="">
        <DocumentProductPriceDiff Diff="context.Diff" />
    </GridColumn>
    <GridColumn TItem="GridClass.GridItem" HeaderText="Цена">
        <MoneyDisplay Money="context.Entity.Price" />
    </GridColumn>
    <GridColumn TItem="GridClass.GridItem" HeaderText="Сумма">
        <MoneyDisplay Money="new Money(context.Entity.Price.Value*context.Entity.Quantity)" />
    </GridColumn>
</Grid>


@code {
    private Modal modal = default!;
    private GridClass gridItem = new();
    private ViewModel model = new();

    [Parameter]
    [EditorRequired]
    public long DocumentId { get; set; }

    public bool IsEditable => model.Entity.State switch
    {
        PorphumSales.Logic.Models.Document.DocumentState.Complete => false,
        _ => true
    };

    public ICollection<ButtonDescription> StateButtons => model.Entity.State switch
    {
        PorphumSales.Logic.Models.Document.DocumentState.Fill => new List<ButtonDescription>
        {
            new ButtonDescription
            {
                Type=ButtonType.Button,
                Color=ButtonColor.Success,
                Tittle="Добавить",
                OnClickAsync=AddNewAsync
            },
            new ButtonDescription
            {
                Type=ButtonType.Button,
                Color=ButtonColor.Warning,
                Style="",
                Tittle="Провести",
                OnClickAsync=ChangeStateAsync
            }
        },
        _ => Array.Empty<ButtonDescription>()
    };

    protected override async Task OnParametersSetAsync()
    {
        await LoadEntity();
    }

    private async Task LoadEntity()
    {
        var document = repository.GetByKey(DocumentId);
        model.Entity = document;
        if (gridItem is null || gridItem.Grid is null)
        {
            await Task.CompletedTask;
            return;
        }

        await gridItem.Grid.RefreshDataAsync();
    }

    private async Task Submit()
    {
        await LoadEntity();

    }

    private async Task ChangeStateAsync()
    {
        await LoadEntity();
        var document = model.Entity;
        var result = _documentSateMachine.GoToState(ref document, PorphumSales.Logic.Models.Document.DocumentState.Complete);

        if (!result)
        {
            return;
        }

        repository.Update(document);

        await LoadEntity();
    }

    private async Task AddNewAsync()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<ProductFindEventArgs>(this, SetParamsForProduct));
        await modal.ShowAsync<ProductFinder>(
            title: "Выберите наименование",
            parameters: parameters
        );
    }

    private async Task SetParamsForProduct(ProductFindEventArgs args)
    {
        var parameters = new Dictionary<string, object>();

        var state = statePicker.PickState(args.Entity);

        parameters.Add("ProductId", args.Entity.Key);
        parameters.Add("State", state);
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<AddProductEventArgs>(this, AddProductToDoc));
        await modal.ShowAsync<DocumentAddProduct>(title: "Задайте параметры:", parameters: parameters);
    }

    public async Task RowClick(GridRowEventArgs<GridClass.GridItem> args)
    {
        var position = new AddProductEventArgs
            {
                Price = args.Item.Entity.Price.Value,
                Quantity = args.Item.Entity.Quantity,
                Product = args.Item.Entity.Product
            };

        var parameters = new Dictionary<string, object>();

        var state = statePicker.PickState(position.Product.MappedEntity);

        parameters.Add("ProductId", position.Product.MapKey);
        parameters.Add("State", state);
        parameters.Add("Row", position);
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<AddProductEventArgs>(this, AddProductToDoc));
        await modal.ShowAsync<DocumentAddProduct>(title: "Обновите параметры:", parameters: parameters);
    }

    public async Task<GridDataProviderResult<GridClass.GridItem>> GridDataProvider(GridDataProviderRequest<GridClass.GridItem> request)
    {
        var skip = (request.PageNumber - 1) * request.PageSize;
        var limit = request.PageSize;

        var type = model.Entity.Type switch
        {
            PorphumSales.Logic.Models.Document.DocumentType.Prihod => -1,
            PorphumSales.Logic.Models.Document.DocumentType.Rashod => 1,
            _ => 0
        };

        var data = model.Entity.Fill.Rows
        .Select(x => new GridClass.GridItem
            {
                Entity = x
            })
        .Select(x =>
        {
            if (x.Entity.Product.MapState != MapState.Success)
            {
                return x;
            }

            var price = statePicker.PickState(x.Entity.Product.MappedEntity);

            if (price.Price is null)
            {
                return x;
            }

            x.Diff = (x.Entity.Price.Value - price.Price.Value.Value) * type;
            x.Diff /= price.Price.Value.Value;
            return x;
        })
        .OrderBy(x => x.Entity.Product.MapKey)
        .Skip(skip)
        .Take(limit)
        .ToArray();

        return await Task.FromResult(new GridDataProviderResult<GridClass.GridItem>
            {
                Data = data,
                TotalCount = model.Entity.Fill.Rows.Count
            });
    }

    public async Task AddProductToDoc(AddProductEventArgs args)
    {
        await modal.HideAsync();
        model.Entity.Fill.AddOrUpdateProduct(args.Product.MappedEntity, args.Quantity, new Money(args.Price));
        repository.Update(model.Entity);

        await LoadEntity();
    }

    public class ViewModel
    {
        public static string TITTLE_STYLE = "col-md-2";
        public static string CONTENT_STYLE = "col-md-2";

        private string _typeString => Entity.Type switch
        {
            PorphumSales.Logic.Models.Document.DocumentType.Prihod => "Приходная",
            PorphumSales.Logic.Models.Document.DocumentType.Rashod => "Расходная",
            _ => "Неопределенная"
        };

        public DEntity Entity { get; set; } = null!;

        public string PageTittle => $"Накладная №{Entity.Header.Number}";

        public string Tittle => $"{_typeString} накладная №{Entity.Header.Number} от {Entity.Header.Date.ToString("dd.MM.yyyy")}";

        public IMappableModel<Client, long> Client => Entity.Type switch
        {
            PorphumSales.Logic.Models.Document.DocumentType.Prihod => Entity.Header.Who,
            PorphumSales.Logic.Models.Document.DocumentType.Rashod => Entity.Header.With,
            _ => throw new InvalidOperationException()
        };


    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;

        public Grid<GridItem> Grid { get; set; } = default!;


        public class GridItem
        {
            public SaleProduct Entity { get; set; } = default!;

            public decimal? Diff { get; set; } = null!;
        }
    }

    public class ButtonDescription
    {
        public string Tittle { get; set; } = default!;

        public string Style { get; set; } = "margin-right:1rem";

        public string Class { get; set; } = "col-md-1";

        public ButtonColor Color {get; set;}

        public ButtonType Type { get; set; }

        public Func<Task> OnClickAsync { get; set; }

        public Action OnClick { get; set; }
    }
}
