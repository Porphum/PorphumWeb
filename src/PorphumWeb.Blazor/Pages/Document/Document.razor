@page "/document/{documentId:long}"
@using General
@using General.Abstractions.Models
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query
@using PorphumReferenceBook.Logic.Models.Client
@using PorphumReferenceBook.Logic.Models.Product
@using PorphumSales.Logic.Abstractions.Models
@using PorphumSales.Logic.Abstractions.Storage.Repository;

@using PorphumSales.Logic.Models
@using PorphumWeb.Blazor.Pages.Components
@using TEntity = PorphumSales.Logic.Storage.Models.Document;
@using DEntity = PorphumSales.Logic.Models.Document.Document;
@using DClient = PorphumReferenceBook.Logic.Models.Client.Client;
@using static PorphumWeb.Blazor.Pages.Components.DocumentAddProduct
@using static PorphumWeb.Blazor.Pages.Components.ProductFinder

@inject NavigationManager Navigation
@inject IDocumentRepository repository;
@inject ISalesQueryParamFactory paramFactory;
@inject IDocumentStateMachine _documentSateMachine;

<Modal @ref="modal" />
<PageTitle>@model.PageTittle</PageTitle>

<div class="row">
    <h2>
        @model.Tittle
    </h2>
</div>
<div class="row">
    <div class="@ViewModel.TITTLE_STYLE">
        <h3>
            <b>
                Клиент
            </b>
        </h3>

    </div>
    <div class="@ViewModel.CONTENT_STYLE">
        <h4><PorphumWeb.Blazor.Pages.Components.MapClient Entity="model.Client"/></h4>
    </div>
</div>
<div class="row">
    <div class="@ViewModel.TITTLE_STYLE">
        <h3>
            <b>
                Состояние
            </b>
        </h3>

    </div>
    <div class="@ViewModel.CONTENT_STYLE">
        <h4><PorphumWeb.Blazor.Pages.Components.DocumentStateDisplay State="model.Entity.State" /></h4>
    </div>
</div>
<div class="row">
    <div class="@ViewModel.TITTLE_STYLE">
        <h3>
            <b>
                Сумма
            </b>
        </h3>

    </div>
    <div class="@ViewModel.CONTENT_STYLE">
        <h4><PorphumWeb.Blazor.Pages.Components.MoneyDisplay Money="@(new Money((decimal)model.Entity.Key))" /></h4>
    </div>
</div>
<hr />
<br/>

<EditForm EditContext="gridItem.EditContext">
    <div class="row">
        @foreach (var button in StateButtons)
        {
            if (button.OnClick is null)
            {
                <Button Class=@button.Class
                        Style=@button.Style
                        Type=@button.Type
                        Color=@button.Color
                        @onclick="@(button.OnClickAsync)">
                    @button.Tittle
                </Button>
            }
            else
            {
                <Button Class=@button.Class
                        Style=@button.Style
                        Type=@button.Type
                        Color=@button.Color
                        @onclick="@(button.OnClick)">
                    @button.Tittle
                </Button>
            }

        }
    </div>
    <br />
@* <Grid @ref="grid"
      TItem="GridItem"
      Class="table table-hover table-bordered table-striped"
      DataProvider="model.EmployeesDataProvider"
      ItemsPerPageText="some text"
      PageSizeSelectorItems="new int[] {1}"
      PaginationItemsTextFormat=""
      AllowPaging="true"
      PageSize="5"
      Responsive="true">

    <GridColumn TItem="GridItem" HeaderText="Наименование">
        <PorphumWeb.Blazor.Pages.Components.MapProduct Entity="@context.Product" />
    </GridColumn>
    <GridColumn TItem="GridItem" HeaderText="Колличество">
        <InputNumber id="number" @bind-Value=@context.Quantity />
    </GridColumn>
</Grid> *@

    @if (gridItem.Model.Entities is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Наименование</th>
                    <th>Количество</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in gridItem.Model.Entities)
                {
                    <tr>
                        <td><PorphumWeb.Blazor.Pages.Components.MapProduct Entity="entity.Product" /></td>
                        <td><InputNumber id="number" @bind-Value=entity.Quantity/></td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination ActivePageNumber="@gridItem.CurrentPage"
                    TotalPages="@gridItem.PageLimit"
                    Alignment="Alignment.Center"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight"
                    PageChanged="OnPageChangedAsync" />
    }

</EditForm>



@code {
    private Modal modal = default!;
    private GridClass gridItem = new();
    private ViewModel model = new();

    [Parameter]
    [EditorRequired]
    public long DocumentId { get; set; }

    public ICollection<ButtonDescription> StateButtons => model.Entity.State switch
    {
        PorphumSales.Logic.Models.Document.DocumentState.Fill => new List<ButtonDescription>
        {
            new ButtonDescription
            {
                Type=ButtonType.Button,
                Color=ButtonColor.Success,
                Tittle="Добавить",
                OnClickAsync=AddNewAsync
            },
            new ButtonDescription
            {
                Type=ButtonType.Submit,
                Color=ButtonColor.Primary,
                Tittle="Сохранить",
                OnClick=Submit
            },
            new ButtonDescription
            {
                Type=ButtonType.Button,
                Color=ButtonColor.Warning,
                Style="",
                Tittle="Провести",
                OnClick=ChangeStateAsync
            },
        },
        _ => Array.Empty<ButtonDescription>()
    };

    protected override void OnInitialized()
    {
        gridItem.EditContext = new(gridItem.Model);
    }

    protected override void OnParametersSet()
    {
        LoadEntity();
    }

    private void LoadEntity()
    {
        var document = repository.GetByKey(DocumentId);
        model.Entity = document;

        int skipCount, rowsLimit;

        gridItem.UpdateDataForPagination(
            count: model.Entity.Fill.Rows.Count,
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );


        gridItem.Model.Entities = model.Entity.Fill.Rows
        .Select(x => new GridClass.GridItem
            {
                Product = x.Product,
                Quantity = x.Quantity
            })
        .OrderBy(x => x.Product.MapKey)
        .Skip(skipCount)
        .Take(rowsLimit)
        .ToArray();

    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { gridItem.CurrentPage = newPageNumber; });

        LoadEntity();
    }

    private void Submit()
    {
        var document = repository.GetByKey(DocumentId);
        model.Entity = document;

        foreach(var product in gridItem.Model.Entities)
        {
            model.Entity.Fill.AddOrUpdateProduct(product.Product.MappedEntity, product.Quantity);
        }

        repository.Update(model.Entity);

        LoadEntity();

    }

    private void ChangeStateAsync()
    {
        LoadEntity();
        var document = model.Entity;
        var result = _documentSateMachine.GoToState(ref document, PorphumSales.Logic.Models.Document.DocumentState.Complete);

        if (!result)
        {
            return;
        }

        repository.Update(document);

        LoadEntity();
    }

    private async Task AddNewAsync()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<ProductFindEventArgs>(this, SetParamsForProduct));
        await modal.ShowAsync<ProductFinder>(
            title: "Выберите наименование",
            parameters: parameters
        );
    }

    private async Task SetParamsForProduct(ProductFindEventArgs args)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("ProductId", args.Entity.Key);
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<AddProductEventArgs>(this, AddProductToDoc));
        await modal.ShowAsync<DocumentAddProduct>(title: "Задайте параметры:", parameters: parameters);
    }

    private async Task AddProductToDoc(AddProductEventArgs args)
    {
        await modal.HideAsync();
        model.Entity.Fill.AddOrUpdateProduct(args.Product.MappedEntity, args.Quantity);
        repository.Update(model.Entity);

        LoadEntity();
    }

    public class ViewModel
    {
        public static string TITTLE_STYLE = "col-md-2";
        public static string CONTENT_STYLE = "col-md-2";

        private string _typeString => Entity.Type switch
        {
            PorphumSales.Logic.Models.Document.DocumentType.Prihod => "Приходная",
            PorphumSales.Logic.Models.Document.DocumentType.Rashod => "Расходная",
            _ => "Неопределенная"
        };

        public DEntity Entity { get; set; } = null!;

        public string PageTittle => $"Накладная №{Entity.Header.Number}";

        public string Tittle => $"{_typeString} накладная №{Entity.Header.Number} от {Entity.Header.Date.ToString("dd.MM.yyyy")}";

        public IMappableModel<Client, long> Client => Entity.Type switch
        {
            PorphumSales.Logic.Models.Document.DocumentType.Prihod => Entity.Header.Who,
            PorphumSales.Logic.Models.Document.DocumentType.Rashod => Entity.Header.With,
            _ => throw new InvalidOperationException()
        };



        // public async Task<GridDataProviderResult<GridItem>> EmployeesDataProvider(GridDataProviderRequest<GridItem> request)
        // {
        //     return await Task.FromResult(request.ApplyTo(Entity.Fill.Rows.Select(x => new GridItem
        //     {
        //         Product = x.Product,
        //         Quantity = x.Quantity
        //     })));
        // }
    }

    public class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public EditContext? EditContext { get; set; }

        public GridModel Model { get; set; } = new();

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }

        public class GridModel
        {
            public GridItem[]? Entities { get; set; }
        }

        public class GridItem
        {
            public IMappableModel<Product, long> Product { get; set; }

            public int Quantity { get; set; }

        }
    }

    public class ButtonDescription
    {
        public string Tittle { get; set; } = default!;

        public string Style { get; set; } = "margin-right:1rem";

        public string Class { get; set; } = "col-md-1";

        public ButtonColor Color {get; set;}

        public ButtonType Type { get; set; }

        public Func<Task> OnClickAsync { get; set; }

        public Action OnClick { get; set; }
    }
}
