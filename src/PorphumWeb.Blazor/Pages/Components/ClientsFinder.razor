@using General.Abstractions.Storage.Query;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository;
@using PorphumReferenceBook.Logic.Abstractions.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Storage.Repository.Query;
@using PorphumReferenceBook.Logic.Storage.Repository;
@using PorphumWeb.Blazor.Classes
@using TEntity = PorphumReferenceBook.Logic.Storage.Models.Client;
@using DEntity = PorphumReferenceBook.Logic.Models.Client.Client;

@inject IClientsQueryRepository repository;
@inject IRefBookQueryParamFactory paramFactory;

<div class="row">
    <EditForm EditContext="gridItem.EditContext">
        <p>
            Наименование:<br />
                <InputText id="search-string" @bind-Value="gridItem.Filter.SearchString" />
        </p>
            <button type="submit" class="btn btn-dark" @onclick="@(() => Submit(gridItem.EditContext))">Поиск</button>
    </EditForm>
</div>
<hr />
    @if (gridItem.Entities is not null)
    {
        <div class="row">
        <table class="table">
            <thead>
                <tr>
                    <th>Клиент</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var entity in gridItem.Entities)
                {
                    <tr>
                        <td><ClientDisplay Entity="entity"/></td>

                        <td>
                                <button class="btn btn-dark" @onclick="@(() => SelectOnAsync(entity, gridItem.EditContext))">Выбрать</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
            <div class="row">
            <Pagination ActivePageNumber="@gridItem.CurrentPage"
                        TotalPages="@gridItem.PageLimit"
                        Alignment="Alignment.Center"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        PageChanged="OnPageChangedAsync" />
        </div>
    }


@code {
    private GridClass gridItem = new();

    [Parameter]
    [EditorRequired]
    public EventCallback<ClientFindEventArgs> OnClickCallback { get; set; }

    private void SearchProducts()
    {
        int skipCount, rowsLimit;

        gridItem.UpdateDataForPagination(
            count: repository.GetLimit(),
            skipCount: out skipCount,
            rowsLimit: out rowsLimit
        );

        var config = new ClientsParamConfig()
            {
                NameLike = gridItem.Filter.SearchString,
                Skip = skipCount,
                Limit = rowsLimit
            };

        var query = (paramFactory as IQueryParamsFactory<ClientsParamType, ClientsParamConfig, TEntity>).InitQuery(config);

        gridItem.Entities = repository.GetByQuery(query).ToArray();
    }

    public async Task SelectOnAsync(DEntity entity, EditContext? _editContext)
    {
        gridItem.Filter.SearchString = null!;
        Submit(_editContext);
        await OnClickCallback.InvokeAsync(new ClientFindEventArgs
        {
            Entity = entity
        });
    }

    public void Submit(EditContext? _editContext)
    {
        if (string.IsNullOrWhiteSpace(gridItem.Filter.SearchString))
        {
            gridItem.Entities = null;
            return;
        }

        SearchProducts();
    }

    public async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { gridItem.CurrentPage = newPageNumber; });

        SearchProducts();
    }

    protected override void OnInitialized()
    {
        gridItem.EditContext = new(gridItem.Filter);
    }

    public class ClientFindEventArgs : MouseEventArgs
    {
        public DEntity Entity { get; set; } = null!;
    }

    internal class GridClass
    {
        public static readonly int PAGE_SIZE = 5;
        public int CurrentPage { get; set; } = 1;

        public int PageLimit { get; set; } = 1;

        public EditContext? EditContext { get; set; }

        public FilterClass Filter { get; set; } = new();

        public DEntity[]? Entities { get; set; }

        public void UpdateDataForPagination(int count, out int skipCount, out int rowsLimit)
        {
            PageLimit = (count + PAGE_SIZE - 1) / PAGE_SIZE;
            skipCount = (CurrentPage - 1) * PAGE_SIZE;
            rowsLimit = PAGE_SIZE;
        }

        public class FilterClass
        {
            public string? SearchString { get; set; } = null!;
        }
    }
}
